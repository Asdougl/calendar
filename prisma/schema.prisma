// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    preferences Json?

    accounts  Account[]
    sessions  Session[]
    Event     Event[]
    Category  Category[]
    Period    Period[]
    Recursion Recursion[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Data

enum TimeStatus {
    STANDARD
    ALL_DAY
    NO_TIME
}

model Event {
    id    String @id @default(uuid())
    title String

    datetime    DateTime
    timeStatus  TimeStatus @default(NO_TIME)
    location    String?
    endDateTime DateTime?
    cancelled   Boolean    @default(false)

    done Boolean? // for todos

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    recursion   Recursion? @relation(fields: [recursionId], references: [id])
    recursionId String?

    SourceLink EventLink[] @relation("source")
    TargetLink EventLink[] @relation("target")

    @@index([createdById])
    @@index([categoryId])
    @@index([recursionId])
}

model Category {
    id      String  @id @default(uuid())
    name    String
    color   String
    private Boolean @default(false)
    hidden  Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    Event     Event[]
    Period    Period[]
    Recursion Recursion[]

    @@index([createdById])
}

model Period {
    id        String   @id @default(uuid())
    name      String
    color     String
    icon      String
    startDate DateTime
    endDate   DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    @@index([createdById])
    @@index([categoryId])
}

enum TIME_INVERVAL {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

model Recursion {
    id            String        @id @default(uuid())
    title         String
    interval      TIME_INVERVAL
    intervalCount Int
    recurrenceEnd DateTime?
    triggered     Boolean       @default(false)

    // Template for Event
    datetime    DateTime
    timeStatus  TimeStatus @default(NO_TIME)
    location    String?
    endDateTime DateTime?
    // is defaulted to boolean?
    todo        Boolean    @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    events Event[]

    @@index([createdById])
    @@index([categoryId])
}

enum EVENT_LINK_RELATION {
    TRIGGERED
}

model EventLink {
    id       String              @id @default(uuid())
    relation EVENT_LINK_RELATION

    source   Event  @relation(fields: [sourceId], references: [id], name: "source")
    sourceId String

    target   Event  @relation(fields: [targetId], references: [id], name: "target")
    targetId String

    @@index([sourceId])
    @@index([targetId])
}
